#!/bin/bash

# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>   add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(auto,yellow)%h%<(2,trunc)"
RELATIVE_TIME="%Cgreen(%ar)"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"
COLUMNS=$(tput cols)

FORMAT="$HASH $RELATIVE_TIME $AUTHOR $REFS $SUBJECT"

show_git_head() {
    pretty_git_log -1
    git show -p --pretty="tformat:${FORMAT}"
}

pretty_git_log() {
    git log --graph --pretty="format:${FORMAT}" --color=always |
        # Replace (2 years ago) with (2 years)
        sed -Ee 's/(^[^<]*) ago\)/\1)/' |
        # Replace (2 years, 5 months) with (2 years)
        sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        # Kill long lines
        cut -c 1-$COLUMNS |
        # Page only if we need to
        less -FXRS
}

remote_branches_state() {
        # For each remote branch
        for branch in `git branch -r | grep -v HEAD`
        do
          # Grab the last commit date, author and email of the branch
          dateInfo=`git show --format="Last commit on %ci (%cr) by %cn (%ce)" $branch | head -n 1`
          # Grab how many commits behind origin/develop a branch is
          behindDevelopCommitState=`git rev-list --left-only --count origin/develop...$branch`
          # Grab how many commits ahead of origin/develop a branch is
          aheadDevelopCommitState=`git rev-list --right-only --count origin/develop...$branch`
          # Sew together the results
          echo "$dateInfo [$behindDevelopCommitState behind $aheadDevelopCommitState ahead] origin/develop" \\t\\t$branch
        done
}
